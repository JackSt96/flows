{"version":3,"sources":["apps/flows/reducers/FlowReducer.js","apps/flows/reducers/index.js","components/customMaterialComponents/StyledLink.js","apps/flows/views/FlowTestView.js","apps/flows/actions/flows.js","graphql/queries.js","apps/flows/containers/views/FlowTestViewContainer.js","apps/flows/FlowPaneContainer.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["startingState","currTest","answerList","loading","reducers","flows","state","arguments","length","undefined","action","type","Object","objectSpread","test","answer","StyledLink","styled","Link","_templateObject","ContentWrapper","div","FlowTestView_templateObject","StyledButton","withStyles","root","margin","width","Button","SpacesView","componentDidMount","_this","props","downloadCurrentTest","testId","_this2","this","_this$props","text","answers","react_default","a","createElement","Typography_default","variant","map","ans","key","to","destination","color","onClick","event","React","Component","loadCurrentAnswers","downloadCurrentAnswers","id","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","dispatch","currAnswers","wrap","_context2","prev","next","console","log","API","graphql","graphqlOperation","filter","testid","eq","limit","sent","data","listAnswers","items","t0","stop","_x2","apply","getId","ownProps","match","params","connect","question","_ref","_callee","_context","getTest","is_solution","_x","FlowView","FlowPaneContainer_templateObject","AppPane","FlowPaneContainer_ContentWrapper","Route","path","component","FlowTest","exact","flowTheme","createMuiTheme","palette","primary","main","secondary","error","typography","fontFamily","button","textTransform","App","styles","theme","FlowPaneContainer","Boolean","window","location","hostname","awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","Amplify","configure","config","allReducers","combineReducers","flowsReducer","composeFunctions","applyMiddleware","thunkMiddleware","store","createStore","compose","render","es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35d2fb0f.chunk.js","sourcesContent":["\r\nimport Uuid from \"uuid/v4\";\r\n\r\nconst startingState = {\r\n  currTest: {},\r\n  answerList: [],\r\n  loading: true,\r\n};\r\n\r\nconst flows = (state = startingState, action) => {\r\n  switch (action.type) {\r\n    case \"ON_LOAD_CURRENT_TEST\":{\r\n      return {\r\n        ...state,\r\n        currTest: action.test\r\n      }\r\n    }\r\n    \r\n    case \"ON_LOAD_CURRENT_ANSWERS\":{\r\n      return {\r\n        ...state,\r\n        answerList: action.answer\r\n      }\r\n    }\r\n\r\n    case \"IS_LOADING\": {\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    }\r\n\r\n    case \"DONE_LOADING\": {\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default flows;\r\n","import flows from \"./FlowReducer\";\r\n\r\nexport default {\r\n  //sidebars\r\n  flows\r\n};\r\n","\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\n// var linkStyle = { textDecoration: \"none\", color: \"inherit\" };\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: inherit;\r\n`\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StyledLink } from \"../../../components/customMaterialComponents/StyledLink\";\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledButton = withStyles({\r\n  root:{\r\n    margin: 5,\r\n    width: 300\r\n  }\r\n})(Button)\r\n\r\nclass SpacesView extends React.Component {\r\n  // state = { loading: true };\r\n  componentDidMount = () => {\r\n    this.props.downloadCurrentTest(this.props.testId);\r\n  };\r\n\r\n  render() {\r\n    let { text, testId, answers, loading } = this.props;\r\n    return (\r\n      <ContentWrapper>\r\n        {!loading && (\r\n          <div>\r\n            <Typography variant={\"h2\"}> {text} </Typography>\r\n            {answers &&\r\n              answers.map((ans, key) => (\r\n                <div key={key} >\r\n\r\n<StyledLink to={\"/\" + ans.destination}>\r\n                  <StyledButton\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={event =>\r\n                      this.props.downloadCurrentTest(ans.destination)\r\n                    }\r\n                  >\r\n                    {ans.answer}\r\n                  </StyledButton>\r\n                </StyledLink>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        )}\r\n      </ContentWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpacesView;\r\n","import {\r\n  listAnswers,\r\n  getTest\r\n} from \"../../../graphql/queries\";\r\nimport { API, graphqlOperation } from \"aws-amplify\";\r\n\r\nexport const doneLoading = () => ({\r\n  type: \"DONE_LOADING\"\r\n});\r\nexport const isLoading = () => ({\r\n  type: \"IS_LOADING\"\r\n});\r\nexport const loadCurrentAnswers = (answer) => ({\r\n  type: \"ON_LOAD_CURRENT_ANSWERS\",\r\n  answer\r\n});\r\nexport const loadCurrentTest = (test) => ({\r\n  type: \"ON_LOAD_CURRENT_TEST\",\r\n  test\r\n});\r\n\r\nexport const downloadCurrentTest = id => async dispatch => {\r\n  console.log(\"STARTING\")\r\n  let currTest = null;\r\n  dispatch(isLoading());\r\n  try {\r\n    currTest = await API.graphql(graphqlOperation(getTest, { id: id }));\r\n    currTest = currTest.data.getTest;\r\n    console.log(\"SUCCESS: LOAD CURRENT TEST \");\r\n    dispatch(loadCurrentTest(currTest));\r\n    if(!currTest.is_solution && currTest.answers)\r\n      dispatch(downloadCurrentAnswers(currTest.id));\r\n    else{\r\n      dispatch(loadCurrentAnswers([]));\r\n      dispatch(doneLoading());\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const downloadCurrentAnswers = id => async dispatch => {\r\n  dispatch(isLoading());\r\n  console.log(\"START: LOAD CURRENT ANSWERS \");\r\n  // let answerFilter = answers.map((ans,key) => {return {id: ans};});\r\n  // console.log(answerFilter)\r\n  try {\r\n    let currAnswers = await API.graphql(\r\n      graphqlOperation(listAnswers, {\r\n        filter: { testid: {eq: id }},\r\n        limit: 1000\r\n      })\r\n    );\r\n    currAnswers = currAnswers.data.listAnswers.items;\r\n    console.log(\"SUCCESS: LOAD CURRENT ANSWERS \");\r\n    console.log(currAnswers);\r\n    dispatch(loadCurrentAnswers(currAnswers));\r\n    dispatch(doneLoading());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getTest = `query GetTest($id: ID!) {\n  getTest(id: $id) {\n    id\n    question\n    answers\n    is_solution\n  }\n}\n`;\nexport const listTests = `query ListTests(\n  $filter: ModelTestFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTests(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      question\n      answers\n      is_solution\n    }\n    nextToken\n  }\n}\n`;\nexport const getAnswer = `query GetAnswer($id: ID!) {\n  getAnswer(id: $id) {\n    id\n    testid\n    answer\n    destination\n  }\n}\n`;\nexport const listAnswers = `query ListAnswers(\n  $filter: ModelAnswerFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listAnswers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      testid\n      answer\n      destination\n    }\n    nextToken\n  }\n}\n`;\n","import { connect } from \"react-redux\";\r\nimport FlowView from \"../../views/FlowTestView\";\r\nimport {downloadCurrentTest} from '../../actions/flows'\r\n\r\nconst getId = (ownProps) => {\r\n  return ownProps.match.params.id || \"new\"\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  text: state.flows.currTest.question,\r\n  testId: getId(ownProps),\r\n  answers: state.flows.answerList,\r\n  loading: state.flows.loading\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  downloadCurrentTest: (id) => dispatch(downloadCurrentTest(id))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FlowView);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport FlowTest from \"./containers/views/FlowTestViewContainer\";\r\nconst ContentWrapper = styled.div`\r\n  max-width: 1180px;\r\n  minheight: 2000px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ANewDirect = () => (<Redirect to=\"/new\"/>)\r\n\r\nclass AppPane extends Component {\r\n  async componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <ContentWrapper>\r\n        <Route path=\"/:id\" component={FlowTest} />\r\n        <Route exact path=\"/\" component={FlowTest}/>\r\n        {/* <LoadingContainer/> */}\r\n      </ContentWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // loading: state.spaces.loading\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  // loadData: () => dispatch(loadDataList())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AppPane);\r\n","import React from \"react\";\r\nimport FlowPaneContainer from \"./apps/flows/FlowPaneContainer\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\n\r\nconst flowTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#7f2982\",\r\n    },\r\n    secondary: {\r\n      main: \"#f7717d\",\r\n    },\r\n    error: {\r\n      main: \"#e53935\",\r\n    }\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Helvetica Neue\"',\r\n    color: \"#16001E\",\r\n    button: {\r\n      textTransform: \"none\"\r\n    }\r\n  }\r\n});\r\n\r\n\r\nconst App = () => (\r\n  <MuiThemeProvider theme={flowTheme}>\r\n    <FlowPaneContainer />\r\n  \r\n   {/* Hi Jack */}\r\n  </MuiThemeProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"123.flowchoice.net\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://123.flowchoice.net.s3-website-us-east-1.amazonaws.com\",\n    \"aws_appsync_graphqlEndpoint\": \"https://gumxwz3jwvfolb72q3psl747qu.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-mcw2yfvvtnaipfuwnqivs4ta7i\"\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport flowsReducer from \"./apps/flows/reducers\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport Amplify from 'aws-amplify';\r\nimport config from './aws-exports';\r\n\r\nAmplify.configure(config);\r\n\r\nconst allReducers = combineReducers({\r\n  ...flowsReducer,\r\n});\r\n\r\nconst composeFunctions = [\r\n  applyMiddleware(thunkMiddleware)\r\n];\r\n\r\nconst store = createStore(allReducers, compose(...composeFunctions));\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}